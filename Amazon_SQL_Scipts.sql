----------------------------------------------------------
-- Amazon SQL Project
-----------------------------------------------------------
use amazon_db;

-----------------------------------------------------------
-- Creating Category table
Create table category(
	category_id int primary key,
    category_name varchar(20)
	);

-- Creating Customers table
Create table customers(
	customer_id int primary key,
    first_name varchar(15),
    last_name varchar(15),
    state varchar(20)
    );
    
-- Creating Sellers Table
Create table sellers(
	seller_id int primary key,
    seller_name varchar(30),
    origin varchar(7)
    );
    
-- Creating Products Table
Create table products(
	product_id int primary key,
    product_name varchar(50),
    price float,
    cogs float,
    category_id int, -- FK
    constraint products_fk_category_id foreign key(category_id) references category(category_id) 
    );

-- Creating Table Orders
Create table orders(
	order_id int primary key,
    order_date date,
    customer_id int, -- FK
    seller_id int, -- FK
    order_status varchar(20),
    constraint orders_fk_customer_id foreign key(customer_id) references customers(customer_id),
    constraint orders_fk_seller_id foreign key(seller_id) references sellers(seller_id)
    );

-- Creating order_item table
Create table order_item(
	order_item_id int primary key,
    order_id int, -- FK
    product_id int,
    quantity int,
    price_per_unit float,
    constraint order_item_fk_order_id foreign key(order_id) references orders(order_id)
    );
    
-- Creating payments table
Create table payments(
	payment_id int primary key,
    payment_date date,
    payment_status varchar(20),
    order_id int, -- FK
    constraint payments_fk_order_id foreign key(order_id) references orders(order_id)
    );
    
-- Creating table shipping
Create table shipping(
	shipping_id int primary key,
    order_id int, -- FK
	shipping_date date,
    return_date date null,
    shipping_providers varchar(20),
    delivery_status varchar(20),
	constraint shipping_fk_order_id foreign key(order_id) references orders(order_id)
    );
    
-- Creating Table inventory
Create table inventory(
	inventory_id int primary key,
	product_id int, -- FK
    stock int,
    warehouse_id int,
    last_stock_date date,
    constraint inventory_fk_product_id foreign key(product_id) references products(product_id)
    );

-------------------------------------------------------
-- EXPLORATORY DATA ANALYSIS

select * from category;

Select * from customers;

Select * from inventory;

Select * from order_item;

Select * from orders;

Select * from payments;
Select distinct payment_status from payments;

Select * from products;

Select * from sellers;

Select * from shipping;
Select distinct delivery_status from shipping;
select * from shipping where return_date is null;


------------------------------------------------------
-- Bussiness Problems
-- Advanced Analysis
------------------------------------------------------

-- Task 1: Top Selling Products 
-- Querry the top 10 products by total sale revenue
alter table order_item
add column Sales float;

update order_item
set Sales = quantity*price_per_unit;

with Product_by_Sales
as
(
Select 
	p.product_id,
	p.product_name, 
	sum(oi.quantity) as Total_Quantity, 
	round(sum(Sales),2) as Total_Sales_Value 
	from order_item oi
join products p
	on oi.product_id=p.product_id
group by oi.product_id, p.product_name
)
Select 
	* 
from Product_by_Sales
order by Total_Sales_Value desc
limit 10;
-----------------------------------------------------

-- Task 2: Revenue by Category
-- Calculate total revenue generated by each product category
-- Challenge: Include the percentage contribution of each category by total revenue

Select 
	c.category_id,
	c.category_name,
	round(sum(Sales),2) as total_revenue,
	round(sum(Sales)/(Select sum(Sales) from order_item)*100,2) as Contribution_Precentage
from order_item oi
left join products p 
	on oi.product_id=p.product_id
left join category c
	on p.category_id=c.category_id
group by c.category_id
order by total_revenue desc;
----------------------------------------------------------

-- Task 3:Average Order Value (AOV)
-- Compute average order value of each customeres
-- Challenge: Include only customers more than 5 orders

Select
	c.customer_id,
	concat(c.first_name," ",last_name) as customer,
	round(avg(Sales),2) as Average_order_value,
	count(o.order_id) as No_of_Orders
from orders o
left join customers c
	on o.customer_id=c.customer_id
left join order_item oi
	on o.order_id=oi.order_id
group by o.customer_id
having count(o.order_id) >5
order by 3 desc;
---------------------------------------------------------

-- Task 4: Monthly Sales Trend
-- Querry monthly sales over past year
-- Display the sales trend, current month sales and last month sales

-- Year over Year Analysis
with yearly_trend 
as
(
	select 
	year(o.order_date) as year,
	round(sum(oi.Sales),2) as Current_year_Sales,
	round(lag(sum(oi.Sales)) over(order by year(o.order_date)),2) as Previous_year_Sales
from orders o
left join order_item oi
	on o.order_id=oi.order_id
group by year(o.order_date)
)
select 
	year,
	Current_year_Sales,
	Previous_year_Sales,
	round((Current_year_Sales-Previous_year_Sales)/Previous_year_Sales*100,2) as Growth_rate_percentage 
from yearly_trend
order by year;

-- Monthly Sales Analysis
with monthly_trend
as
(
Select 
	year(order_date) as year,
	month(order_date) as month,
	monthname(order_date) as month_name,
	round(sum(Sales),2) as Current_month_Sales,
	round(lag(sum(Sales)) over(order by year(order_date), month(order_date)),2) as Previous_month_Sales
from orders o
left join order_item oi
	on o.order_id=oi.order_id
group by year(order_date), month(order_date), monthname(order_date) 
)
select 
	year,
	month_name,
	Current_month_Sales,
	Previous_month_Sales,
	round((Current_month_Sales-Previous_month_Sales)/Previous_month_Sales*100,2) as Growth_rate_percentage 
from monthly_trend
order by year, month;
----------------------------------------------------------

-- Task 5: Customers with no purchase
-- Find the customers who have registered but never placed order

Select 
	*
from customers
where customer_id not in 
		(Select customer_id from orders)
order by customer_id;
-----------------------------------------------------------

-- Task 6: Best Selling Category By State
-- Include Top 3 Categories by each state

with ranked_categories_by_state
as
(
Select
	cu.state as state,
	ca.category_name as Category,
	round(sum(oi.Sales),2) as Total_Sales,
	dense_rank() over(partition by cu.state order by sum(sales) desc) as ranks
from order_item oi
left join orders o
	on oi.order_id=o.order_id
left join products p
	on oi.product_id=p.product_id
left join category ca
	on p.category_id=ca.category_id
left join customers cu
	on o.customer_id=cu.customer_id
group by cu.state, ca.category_name
)
Select
	state, Category, Total_Sales
from ranked_categories_by_state 
where ranks<=3
order by state, ranks; 
------------------------------------------------------------

-- Task 7 : Least Selling Category by State 
-- Identify the least-selling category for each state

with ranked_categories_state 
as
(
Select
	cu.state as state,
	ca.category_name as category,
	round(sum(oi.sales),2) as Total_Sales,
	rank() over(partition by state order by sum(sales)) as ranks
from order_item oi
left join orders o
	on oi.order_id=o.order_id
left join products p
	on oi.product_id=p.product_id
left join category ca
	on p.category_id=ca.category_id
left join customers cu
	on o.customer_id=cu.customer_id
group by cu.state, ca.category_name
)
Select
	state, category, Total_Sales
from ranked_categories_state
where ranks=1
order by state;
-----------------------------------------------------------

-- Task 8: Customer Lifetime Value
-- Calculate the total of value placed by each customer over lifetime

Select
	c.customer_id,
	concat(c.first_name," ",c.last_name) as customer_name,
	count(o.order_id) as Count_of_orders,
	round(sum(oi.Sales),2) as total_value_spent
from orders o
left join customers c
	on o.customer_id = c.customer_id
left join order_item oi
	on o.order_id=oi.order_id
group by c.customer_id
order by 4 desc;
-----------------------------------------------------------

-- Task 9: Inventory Stock Alerts
-- Products with stock level below a certain threshold(less than 10 units)
-- Include last restock_value and warehouse information

select
	i.product_id,
	p.product_name,
	i.stock,
	i.warehouse_id,
	i.last_stock_date
from inventory i
left join products p
	on i.product_id=p.product_id
where stock<10
order by 3;

------------------------------------------------------------

-- Task 10: Shipping Delays
-- Identify orderes where the shipping date is later than 4 days after the order date.
-- Include the customer_name, Order_details and delivery provider.

Select
	o.order_id,
	o.customer_id,
	concat(c.first_name," ",c.last_name) as customer_name,
	o.order_date,
	s.shipping_Date,
	datediff(s.shipping_date, o.order_date) as Days_took_to_ship
from orders o
left join shipping s
	on o.order_id=s.order_id
left join customers c
	on o.customer_id=c.customer_id
where datediff(s.shipping_date, o.order_date)  > 4
order by o.order_id ;
-------------------------------------------------------------

-- Task 11: Payment Success Rate
-- Calculate the Percentage of successful payments, access all orders.
-- Include breakdown by Payment status (eg., Failed,pending)

Select
	payment_status,
	count(payment_id) as No_of_transactions,
	round(count(payment_id)/(select count(payment_id) from payments)*100,2) as Percent_contributon
from payments
group by payment_status
order by 3 desc;
--------------------------------------------------------------

-- Task 12: Top Performing Sellers
-- Find the Top 5 sellers based on total Sales value.
-- Include both successful and failed Orders, and Display their percentage of successful Orders
with top_sellers
as
(
Select 
	s.seller_id,
	s.seller_name,
	format(round(sum(oi.Sales),2),'N') as Total_Sales
from orders o
left join sellers s
	on o.seller_id=s.seller_id
left join order_item oi
	on o.order_id=oi.order_id
group by seller_id
order by sum(oi.Sales) desc
limit 5
), seller_order_status
as
(
select
	seller_id,
	order_status,
	count(*) as No_of_orders
from orders
group by seller_id, order_status
order by seller_id
), total_orders
as
(
select 
	seller_id,
	count(order_status) as total_order_by_each_seller 
from orders
group by seller_id
)
Select
	ts.seller_id,
    ts.seller_name,
    ts.Total_Sales,
    sos.order_status,
    sos.No_of_orders,
    round((No_of_orders/total_order_by_each_seller*100),2) as orders_prencentage
from top_sellers ts
left join seller_order_status sos
	on ts.seller_id=sos.seller_id
left join total_orders t
	on ts.seller_id=t.seller_id
order by ts.Total_Sales desc;
------------------------------------------------------------

-- Task 13: Product Profit Margin
-- Calculate the profit margin for much product (difference between price and cost of goods sold)
-- Rank products by their profit margin, showing highest to lowest
    
Select
	p.product_id,
	p.product_name,
	round(sum(oi.Sales - (p.cogs*oi.quantity)),2) as profit
from products p
right join order_item oi
	on p.product_id=oi.product_id
group by product_id, product_name
order by 3 desc;
-----------------------------------------------------------

-- Task 14: Most Returned Products
-- Top 10 products by the number of return
-- Display the return rate as percentage of total unitssold for each

with top_returned_products
as
(
Select 
	p.product_id, 
	p.product_name,
    sum(case when o.order_status='Returned' then oi.quantity else 0 end) as No_of_units_returned,
    sum(oi.quantity) as total_quantity_ordered
from orders o
inner join order_item oi
	on o.order_id=oi.order_id
inner join products p
	on oi.product_id=p.product_id
group by p.product_id, p.product_name
)
select 
	product_id,
    product_name,
    No_of_units_returned,
    total_quantity_ordered,
    round((No_of_units_returned/total_quantity_ordered*100),2) as Return_precentage
from top_returned_products
order by 5 desc
limit 10;
----------------------------------------------------------

-- Task 15: Inactive Sellers
-- Sellers who have not made any sales in last 6 months

select max(order_date) from orders;
-- So lets consider today date as 2024-08-01

with inactive_seller
as
(
select 
	seller_id,
    seller_name
from sellers
where seller_id not in 
	(select distinct seller_id from orders
    where order_date > date_add('2024-08-01', interval -6 month))
), inactive_seller_sales
as	
(
select 
	s.seller_id,
    max(o.order_date) as last_sales_date,
    sum(oi.Sales) as Total_Sales
from orders o
left join order_item oi
	on o.order_id=oi.order_id
left join sellers s
	on o.seller_id=s.seller_id
where o.seller_id in 
	(select seller_id from inactive_seller)
group by seller_id
)
select 
	s1.seller_id,
    s1.seller_name,
    s2.last_sales_date,
    ifnull(s2.Total_Sales,0) as total_sales
from inactive_seller s1
left join inactive_seller_sales s2
	on s1.seller_id=s2.seller_id;
----------------------------------------------------

-- Task 16: Identify customers based on returning products
-- if returned more than 5 products categorise them as returning_customer else non_returning_customer

with total_order_per_customer
as
(
select
	customer_id,
	count(order_id) as total_orders
from orders
group by customer_id
), returned_order_by_customer
as
(
select 
	c.customer_id,
    concat(c.first_name," ",c.last_name) as customer_name,
    ifnull(sum(case when o.order_status='returned' then 1 else 0 end),0) as returned_orders
from orders o
left join customers c
	on o.customer_id=c.customer_id
group by o.customer_id
)
select
	r.customer_id,
    r.customer_name,
    t.total_orders,
    r.returned_orders,
    case when r.returned_orders>5 then 'returning_customer' else 'non_returning_customer' end as category
from returned_order_by_customer r
left join total_order_per_customer t
	on r.customer_id=t.customer_id
order by 3 desc;
-----------------------------------------------------

-- Task 17: Top 5 Customers in each state
-- rank on the basis of the highest no of orders in each state

with ranked_customer
as
(
Select
	c.customer_id,
    concat(c.first_name," ",c.last_name) as customer_name,
    c.state,
    count(o.order_id) as No_of_orders,
    round(sum(oi.Sales),2) as Total_spent,
    dense_rank() over(partition by c.state order by count(o.order_id) desc) as ranks
from orders o
left join customers c
	on o.customer_id=c.customer_id
left join order_item oi
	on o.order_id=oi.order_id
group by o.customer_id
)
select 
	*
from ranked_customer
where ranks<=5
order by state; 
---------------------------------------------------------

-- Task 18: Revenue by Shipping Provider
-- Calculate the total revenue handled by each provider

Select 
	s.shipping_providers,
    sum(oi.Sales) as Total_Sales,
    count(o.order_id) as No_of_orders,
    round(avg(datediff(s.shipping_date,o.order_date)),0) as time_taken_in_days
from shipping s
left join order_item oi
	on s.order_id=oi.order_id
left join orders o
	on o.order_id=oi.order_id
group by 1;
---------------------------------------------------------

-- Task 19: Top 10 product with highest decreasing revenue ratio compare to last year(2022)
-- 		 and current year(2023)

with product_sales_2022
as
(
Select 
	oi.product_id,
    round(sum(oi.Sales),2) as sales_22
from order_item oi
left join orders o
	on oi.order_id=o.order_id
where year(order_date) = 2022
group by product_id
), product_sales_2023
as
(
Select 
	oi.product_id,
    round(sum(oi.Sales),2) as sales_23
from order_item oi
left join orders o
	on oi.order_id=o.order_id
where year(order_date) = 2023
group by product_id
), combined_sales
as
(
select 
	p2.product_id,
    p.product_name,
    p2.sales_22,
    p3.sales_23
from product_sales_2022 p2
left join product_sales_2023 p3
	on p2.product_id=p3.product_id
left join products p
	on p.product_id=p2.product_id
)
select 
	product_id,
	product_name,
    sales_22,
    sales_23,
    round(case when sales_22>0 then (sales_23-sales_22)/sales_22*100 else 0 end,2) as decrease_percentage
from combined_sales
where sales_22>sales_23
order by 5
limit 10;
-----------------------------------------------------

    


    
    
    
    
    
    
    
    



